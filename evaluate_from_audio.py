# -*- coding: utf-8 -*-
"""evaluate_from_audio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nONeJH15x53uJmMSETyRLv8fGB5Ao1tJ
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from numpy import argmax
import matplotlib.pyplot as plt

import wave, os, glob
# %matplotlib inline

import librosa
import librosa.display
import IPython.display
import random
import warnings
import os
import scipy
from PIL import Image
import pathlib
import csv
# sklearn Preprocessing
from sklearn.model_selection import train_test_split
#Keras
import keras
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from keras import layers
from tensorflow.keras.layers import Conv1D, Conv2D, MaxPooling2D, MaxPooling1D, Dense, Flatten, Dropout, SeparableConv1D
from keras.models import Sequential
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.utils import plot_model,to_categorical
from tensorflow.keras.models import load_model

from sklearn.model_selection import train_test_split
from google.colab import drive


from google.colab import drive
drive.mount('/content/drive/', force_remount=True)

def audio_features(filename):
    sound, sample_rate = librosa.load(filename)
    stft = np.abs(librosa.stft(sound))

    mfccs = np.mean(librosa.feature.mfcc(y=sound, sr=sample_rate, n_mfcc=40),axis=1)
    chroma = np.mean(librosa.feature.chroma_stft(S=stft, sr=sample_rate),axis=1)
    mel = np.mean(librosa.feature.melspectrogram(y=sound, sr=sample_rate),axis=1)
    contrast = np.mean(librosa.feature.spectral_contrast(S=stft, sr=sample_rate),axis=1)
    tonnetz = np.mean(librosa.feature.tonnetz(y=librosa.effects.harmonic(sound), sr=sample_rate),axis=1)

    return np.concatenate((mfccs,chroma,mel,contrast,tonnetz))

x1 = audio_features('/content/drive/My Drive/ICBHI_data/ICBHI_final_database/119_1b1_Ar_sc_Meditron.wav')
x1 = x1.reshape(1, x1.shape[0], 1)

model = load_model('/content/drive/My Drive/ICBHI_data/my_model.keras')
diseases = ["COPD", "Healthy", "URTI", "Bronchiectasis", "Pneumonia", "Bronchiolitis", "Asthma", "LRTI"]

x1.shape

predictions = model.predict(x1)
predicted_classes = np.argmax(predictions, axis=1)

print(diseases[predicted_classes[0]])